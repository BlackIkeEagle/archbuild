#!/bin/bash
source $(dirname $0)/config

## init
thisfolder=`pwd`
source ../repository
packagesdir=${dest}/${repository/-any/}

## build function
function buildInChroot() {
install_what=""
if [ ${#makedepends[@]} -gt 0 ]; then
  for dp in ${makedepends[@]}; do
    case ${dp} in
      git)
        if [ "${install_what}" != "" ]; then
          install_what="${install_what} "
        fi
        install_what="${install_what}git"
        ;;
      subversion)
        if [ "${install_what}" != "" ]; then
          install_what="${install_what} "
        fi
        install_what="${install_what}subversion"
        ;;
      mercurial)
        if [ "${install_what}" != "" ]; then
          install_what="${install_what} "
        fi
        install_what="${install_what}mercurial"
        ;;
      bzr)
        if [ "${install_what}" != "" ]; then
          install_what="${install_what} "
        fi
        install_what="${install_what}bzr"
        ;;
      arch)
        if [ "${install_what}" != "" ]; then
          install_what="${install_what} "
        fi
        install_what="${install_what}arch"
        ;;
      darcs)
        if [ "${install_what}" != "" ]; then
          install_what="${install_what} "
        fi
        install_what="${install_what}darcs"
        ;;
      cvs)
        if [ "${install_what}" != "" ]; then
          install_what="${install_what} "
        fi
        install_what="${install_what}cvs"
        ;;
      monotone)
        if [ "${install_what}" != "" ]; then
          install_what="${install_what} "
        fi
        install_what="${install_what}monotone"
        ;;
    esac
  done
fi
if [ "$install_what" != "" ]; then
  install_before=" -y '${install_what}'"
fi
if [ "$1" == "any" ]; then
  _arch=$1
  buildx="sudo makechrootpkg-ike -c${install_before} -r ${arch64}"
elif [ "$1" == "x86_64" ]; then
  _arch=$1
  buildx="sudo makechrootpkg-ike -c${install_before} -r ${arch64}"
elif [ "$1" == "i686" ]; then
  _arch=$1
  buildx="linux32 sudo makechrootpkg-ike -c${install_before} -r ${arch32}"
else
  _arch='any'
  buildx="sudo makechrootpkg-ike -c${install_before} -r ${arch64}"
fi
if [ ${keepsource} -eq 1 ]; then
  buildx="${buildx} -- --log"
else
  buildx="${buildx} -- -c --log"
fi
fullpkg=${pkgname}-${pkgver}-${pkgrel}-${_arch}.pkg.tar.xz
if [[ ${testing} -eq 0 && -e "${packagesdir}/${_arch}/${fullpkg}" ]]; then
  echo "package ${thisfolder##*/}-${pkgver} .pkg already exists"
  return 1
else
  if [ -d ${packagesdir}/${_arch} ]; then
    echo "packagesdir exists"
  else
    mkdir -p ${packagesdir}/${_arch}
    if [ $? -eq 0 ]; then
      echo "packagesdir created"
    else
      echo "failed to create packagesdir EXIT"
      return 3
    fi
  fi
  SRCDEST=${sourcesdir} PKGDEST=${packagesdir}/${_arch} ${buildx}
  if [ $? -eq 0 ]; then
    echo "package ${thisfolder##*/}-${pkgver} .pkg successfully built"
    rm -f *.pkg.* # remove symlinks
    rm -f *.log{,.*}
    pushd ${packagesdir}/${_arch}
    find -name "${thisfolder##*/}*" -mmin +80 -delete
    repo-add ${repository}.db.tar.gz ${thisfolder##*/}*.pkg.*
    popd
  else
    echo "package ${thisfolder##*/}-${pkgver} .pkg failed"
    return 2
  fi
  return 0
fi
return 0
}

## main
echo "------------------------------------------------------------"
echo "Update System"
echo "------------------------------------------------------------"
sudo mkarchroot -u ${arch32}/root
sudo mkarchroot -u ${arch64}/root

mkres=1
source PKGBUILD
echo "run makepkg for ${thisfolder##*/}"
for _arch in ${arch[@]}; do
  echo ${_arch}
  buildInChroot ${_arch}
  [ $? -eq 0 ] && mkres=0
done
exit ${mkres}

# vim:set ts=2 sw=2 et:
