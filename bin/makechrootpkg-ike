#!/bin/bash
source "$(dirname $0)/../share/app-init"

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# set workdir for binding
WORKDIR=$PWD

# Avoid any encoding problems
export LANG=C

cleanup() {
	trap - EXIT INT QUIT TERM HUP

	[[ -d "$copydir/build/.gnupg" ]] && rm -rf "$copydir/build/.gnupg"

	unbind
	[[ $1 ]] && exit $1
}

unbind() {
	for u in 'srcdest' 'build'; do
		if df -ah | grep ${copydir}/${u}> /dev/null 2>&1; then
			umount ${copydir}/${u}
		fi
	done
}

abort() {
	errmsg 'Aborting makechrootpkg ...'
	cleanup 1
}

trap_abort() {
	abort
}

trap_exit() {
	cleanup 0
}

die() {
	errmsg "$*"
	cleanup 1
}

trap 'trap_abort' INT QUIT TERM HUP
trap 'trap_exit' EXIT

##
#  usage : in_array( $needle, $haystack )
# return : 0 - found
#          1 - not found
##
in_array() {
	local needle=$1; shift
	local item
	for item in "$@"; do
		[[ $item = $needle ]] && return 0 # Found
	done
	return 1 # Not Found
}

##
#  usage : get_full_version( [$pkgname] )
# return : full version spec, including epoch (if necessary), pkgver, pkgrel
##
get_full_version() {
	# set defaults if they weren't specified in buildfile
	pkgbase=${pkgbase:-${pkgname[0]}}
	epoch=${epoch:-0}
	if [[ -z $1 ]]; then
		if [[ $epoch ]] && (( ! $epoch )); then
			echo $pkgver-$pkgrel
		else
			echo $epoch:$pkgver-$pkgrel
		fi
	else
		for i in pkgver pkgrel epoch; do
			local indirect="${i}_override"
			eval $(declare -f package_$1 | sed -n "s/\(^[[:space:]]*$i=\)/${i}_override=/p")
			[[ -z ${!indirect} ]] && eval ${indirect}=\"${!i}\"
		done
		if (( ! $epoch_override )); then
			echo $pkgver_override-$pkgrel_override
		else
			echo $epoch_override:$pkgver_override-$pkgrel_override
		fi
	fi
}


shopt -s nullglob

makepkg_args='-s --noconfirm'
update_first=false
clean_first=false
install_pkg=
install_before=
add_to_db=false
run_namcap=false
chrootdir=
passeddir=

default_copy=$USER
[[ -n $SUDO_USER ]] && default_copy=$SUDO_USER
[[ -z $default_copy || $default_copy = root ]] && default_copy=copy

usage() {
	echo "usage ${0##*/} [options] -r <chrootdir> [--] [makepkg args]"
	echo ' Run this script in a PKGBUILD dir to build a package inside a'
	echo ' clean chroot. All unrecognized arguments passed to this script'
	echo ' will be passed to makepkg.'
	echo ''
	echo ' The chroot dir consists of the following directories:'
	echo ' <chrootdir>/{root, copy} but only "root" is required'
	echo ' by default. The working copy will be created as needed'
	echo ''
	echo 'The chroot "root" directory must be created via the following'
	echo 'command:'
	echo '    mkarchroot <chrootdir>/root base base-devel sudo'
	echo ''
	echo "Default makepkg args: $makepkg_args"
	echo ''
	echo 'Flags:'
	echo '-h         This help'
	echo '-c         Clean the chroot before building'
	echo '-u         Update the working copy of the chroot before building'
	echo '           This is useful for rebuilds without dirtying the pristine'
	echo '           chroot'
	echo '-y         install these packages before running makepkg'
	echo '-d         Add the package to a local db at /repo after building'
	echo '-r <dir>   The chroot dir to use'
	echo '-I <pkg>   Install a package into the working copy of the chroot'
	echo '-l <copy>  The directory to use as the working copy of the chroot'
	echo '           Useful for maintaining multiple copies.'
	echo "           Default: $default_copy"
	echo '-n         Run namcap on the package'
	exit 1
}

while getopts 'hcudr:I:y:l:n' arg; do
	case "$arg" in
		h) usage ;;
		c) clean_first=true ;;
		u) update_first=true ;;
		d) add_to_db=true ;;
		r) passeddir="$OPTARG" ;;
		I) install_pkg="$OPTARG" ;;
		y) install_before="$OPTARG" ;;
		l) copy="$OPTARG" ;;
		n) run_namcap=true; makepkg_args="$makepkg_args -i" ;;
		*) makepkg_args="$makepkg_args -$arg $OPTARG" ;;
	esac
done

# Canonicalize chrootdir, getting rid of trailing /
chrootdir=$(readlink -e "$passeddir")

if [[ ${copy:0:1} = / ]]; then
	copydir=$copy
else
	[[ -z $copy ]] && copy=$default_copy
	copydir="$chrootdir/$copy"
fi

# Pass all arguments after -- right to makepkg
makepkg_args="$makepkg_args ${*:$OPTIND}"

if (( EUID )); then
	die 'This script must be run as root.'
fi

if [[ ! -f PKGBUILD && -z $install_pkg ]]; then
	die 'This must be run in a directory containing a PKGBUILD.'
fi

if [[ ! -d $chrootdir ]]; then
	die "No chroot dir defined, or invalid path '$passeddir'"
fi

if [[ ! -d $chrootdir/root ]]; then
	die "Missing chroot dir root directory. Try using: mkarchroot $chrootdir/root base base-devel sudo"
fi

umask 0022

# Lock the chroot we want to use. We'll keep this lock until we exit.
# Note this is the same FD number as in mkarchroot
exec 9>"$copydir.lock"
if ! flock -n 9; then
	stat_busy "Locking chroot copy '$copy'"
	flock 9
	stat_done
fi

if [[ ! -d $copydir ]] || $clean_first; then
	# Get a read lock on the root chroot to make
	# sure we don't clone a half-updated chroot
	exec 8>"$chrootdir/root.lock"

	if ! flock -sn 8; then
		stat_busy "Locking clean chroot"
		flock -s 8
		stat_done
	fi

	stat_busy 'Creating clean working copy'
	use_rsync=false
	if type -P btrfs >/dev/null; then
		[[ -d $copydir ]] && btrfs subvolume delete "$copydir" &>/dev/null
		btrfs subvolume snapshot "$chrootdir/root" "$copydir" &>/dev/null ||
			use_rsync=true
	else
		use_rsync=true
	fi

	if $use_rsync; then
		mkdir -p "$copydir"
		rsync -a --delete -q -W -x "$chrootdir/root/" "$copydir"
	fi
	stat_done

	# Drop the read lock again
	exec 8>&-
fi

if [[ -n $install_pkg ]]; then
	pkgname="${install_pkg##*/}"
	cp "$install_pkg" "$copydir/$pkgname"

	mkarchroot -r "pacman -U /$pkgname --noconfirm" "$copydir"
	ret=$?

	rm "$copydir/$pkgname"

	# Exit early, we've done all we need to
	exit $ret
fi

$update_first && mkarchroot -u "$copydir"
[[ $install_before != '' ]] && mkarchroot -r "pacman -S --noconfirm $install_before" "$copydir"

[[ ! -d "$copydir/build" ]] && mkdir -p "$copydir/build"
# bind build dir
mount -o bind ${WORKDIR} ${copydir}/build

# Read .makepkg.conf and .gnupg/pubring.gpg even if called via sudo
if [[ -n $SUDO_USER ]]; then
	SUDO_HOME="$(eval echo ~$SUDO_USER)"
	makepkg_conf="$SUDO_HOME/.makepkg.conf"
	if [[ -r "$SUDO_HOME/.gnupg/pubring.gpg" ]]; then
		install -D "$SUDO_HOME/.gnupg/pubring.gpg" "$copydir/build/.gnupg/pubring.gpg"
	fi
else
	makepkg_conf="$HOME/.makepkg.conf"
	if [[ -r "$HOME/.gnupg/pubring.gpg" ]]; then
		install -D "$HOME/.gnupg/pubring.gpg" "$copydir/build/.gnupg/pubring.gpg"
	fi
fi

# Get SRC/PKGDEST from makepkg.conf
if [[ -f $makepkg_conf ]]; then
	eval $(grep '^SRCDEST=' "$makepkg_conf")
	eval $(grep '^MAKEFLAGS=' "$makepkg_conf")
	eval $(grep '^PACKAGER=' "$makepkg_conf")
fi

[[ -z $SRCDEST ]] && eval $(grep '^SRCDEST=' /etc/makepkg.conf)
[[ -z $MAKEFLAGS ]] && eval $(grep '^MAKEFLAGS=' /etc/makepkg.conf)
[[ -z $PACKAGER ]] && eval $(grep '^PACKAGER=' /etc/makepkg.conf)

# Use PKGBUILD directory if PKGDEST or SRCDEST don't exist
[[ -d $SRCDEST ]] || SRCDEST=.

if [[ ! -z "${SRCDEST}" ]]; then
	[[ ! -d "$copydir/srcdest" ]] && mkdir -p "$copydir/srcdest"
	if ! grep -q 'SRCDEST="/srcdest"' "$copydir/etc/makepkg.conf"; then
		echo 'SRCDEST="/srcdest"' >> "$copydir/etc/makepkg.conf"
	fi

	mount -o bind ${SRCDEST} ${copydir}/srcdest
fi

if [[ -n $MAKEFLAGS ]]; then
	sed -i '/^MAKEFLAGS=/d' "$copydir/etc/makepkg.conf"
	echo "MAKEFLAGS='${MAKEFLAGS}'" >> "$copydir/etc/makepkg.conf"
fi

if [[ -n $PACKAGER ]]; then
	sed -i '/^PACKAGER=/d' "$copydir/etc/makepkg.conf"
	echo "PACKAGER='${PACKAGER}'" >> "$copydir/etc/makepkg.conf"
fi

if [ -n "${SUDO_USER}" ]; then
	cp -a /etc/{passwd,group} ${copydir}/etc/
	builduser=${SUDO_USER}
else
	builduser=nobody
fi

# Set target CARCH as it might be used within the PKGBUILD to select correct sources
eval $(grep '^CARCH=' "$copydir/etc/makepkg.conf")
export CARCH

chown -R $builduser "$copydir"/{home,build,srcdest}

cat > "$copydir/etc/sudoers.d/nobody-pacman" <<EOF
Defaults env_keep += "HOME"
$builduser ALL = NOPASSWD: /usr/bin/pacman
EOF
chmod 440 "$copydir/etc/sudoers.d/nobody-pacman"

# Set this system wide as makepkg will source /etc/profile before calling build()
echo 'LANG=C' > "$copydir/etc/locale.conf"

# This is a little gross, but this way the script is recreated every time in the
# working copy
cat >"$copydir/chrootbuild" <<EOF
#!/bin/bash
. /etc/profile
export LANG=C
export HOME=/home

cd /build
sudo -u $builduser makepkg $makepkg_args || touch BUILD_FAILED

[[ -f BUILD_FAILED ]] && exit 1

if $run_namcap; then
	pacman -S --needed --noconfirm namcap
	for pkgfile in /build/PKGBUILD /build/*.pkg.tar.?z; do
		echo "Checking \${pkgfile##*/}"
		sudo -u $builduser namcap "\$pkgfile" 2>&1 | tee "/build/\${pkgfile##*/}-namcap.log"
	done
fi

exit 0
EOF
chmod +x "$copydir/chrootbuild"

if mkarchroot -r "/chrootbuild" "$copydir"; then
	for pkgfile in "$copydir"/build/*.pkg.tar.?z; do
		if $add_to_db; then
			mkdir -p "$copydir/repo"
			pushd "$copydir/repo" >/dev/null
			cp "$pkgfile" .
			repo-add repo.db.tar.gz "${pkgfile##*/}"
			popd >/dev/null
		fi
	done
else
	# Just in case. We returned 1, make sure we fail
	touch "$copydir/build/BUILD_FAILED"
fi

if [[ -e $copydir/build/BUILD_FAILED ]]; then
	rm "$copydir/build/BUILD_FAILED"
	die "Build failed, check $copydir/build"
else
	cleanup 0
fi
