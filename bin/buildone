#!/bin/bash
source "$(dirname $0)/../share/app-init"

if [[ ! -e PKGBUILD ]]; then
	errmsg "this script must be run with a directory containing a PKGBUILD"
	exit 1
fi

if [[ ! -z "$2" ]]; then
	commitmsg="$2"
else
	commitmsg=""
fi

buildbase=$(git symbolic-ref HEAD | sed -e 's/refs\/heads\///' 2> /dev/null)
# check if we have the buildscripts available
if ! which "$buildbase-x86_64-build" > /dev/null 2>&1; then
    buildbase="extra"
fi

## build function
function buildInChroot() {
    if [[ "$1" == "any" ]]; then
        _arch=$1
        buildx="sudo $buildbase-x86_64-build"
    else
        _arch=$1
        buildx="sudo $buildbase-$_arch-build"
    fi
    buildopts=" -- -l archbuild"
    buildcmd="${buildx}${buildopts}"
    eval ${buildcmd}
    buildret=$?
    if [[ $buildret -eq 0 ]]; then
        msg "package $fullpkg successfully built"
        return 0
    elif [[ $buildret -eq 255 ]]; then
        errmsg "creating build environment failed"
        msg "retry with clean build environment"
        buildcmd="${buildx} -c${buildopts}"
        eval ${buildcmd}
        if [[ $? -eq 0 ]]; then
            msg "package successfully built"
            return 0
        else
            errmsg "package failed"
            return 241
        fi
    else
        errmsg "package failed"
        return 240
    fi
    return 254
}

mkres=0
source PKGBUILD
if [[ "$pkgbase" == "" ]]; then
	pkgbase=$pkgname
fi
msg "run makepkg for ${pkgbase}"
for _arch in ${arch[@]}; do
	msg2 ${_arch}
	buildInChroot ${_arch}
	result=$?
	if [[ $mkres -eq 0 && $result -ne 0 ]]; then
		mkres=$result
	fi
done

# on success build commit into git tree
if [[ ${mkres} -eq 0 ]]; then
    msg "generate .SRCINFO"
    mksrcinfo
    msg "commit sucessfull package"
    git add -A .
    finalcommitmsg="$pkgbase :: ${pkgver}-${pkgrel}"
    if [[ "$commitmsg" != "" ]]; then
        finalcommitmsg="${finalcommitmsg} ;; ${commitmsg}"
    fi
    git commit -sm "${finalcommitmsg}"
fi

if [[ "${mailto}" != "" ]]; then
	msg "send mail with the outcome of the build"
	date=$(date +%Y-%m-%d\ %H:%M:%S)
	if [[ ${mkres} -eq 0 ]]; then
		# package success
		logfiles=""
		for logfile in $(find . -mindepth 1 -maxdepth 1 -type f -name '*.log'); do
			logfiles="$logfiles -a $logfile"
		done
		echo "SUCCESS build" | mail -s "archbuild $fullpkg success ${date}"$logfiles ${mailto}
	elif [[ ${mkres} -eq 240 ]] || [[ ${mkres} -eq 241 ]]; then
		# package failed
		logfiles=""
		for logfile in $(find . -mindepth 1 -maxdepth 1 -type f -name '*.log'); do
			logfiles="$logfiles -a $logfile"
		done
		echo "FAILED build" | mail -s "archbuild $fullpkg failed ${date}"$logfiles ${mailto}
	else
		# other failure
		echo "OTHER FAIL build" | mail -s "archbuild $fullpkg failed ${date}" ${mailto}
	fi
fi


exit ${mkres}

