#!/bin/bash
source "$(dirname $0)/../share/app-init"

if [[ ! -e PKGBUILD ]]; then
	errmsg "this script must be run with a directory containing a PKGBUILD"
	exit 1
fi

buildbase=$(git symbolic-ref HEAD | sed -e 's/refs\/heads\///' 2> /dev/null)
# check if we have the buildscripts available
if ! which "$buildbase-x86_64-build" > /dev/null 2>&1; then
    buildbase="extra"
fi

## build function
function buildInChroot() {
    if [[ "$1" == "any" ]]; then
        _arch="x86_64"
    fi
    buildscript="$buildbase-${_arch}-build"
    if ! which "$buildscript" > /dev/null 2>&1; then
        errmsg "required buildscript for arch: $_arch not found"
        return 230
    fi
    #buildopts=" -c -- -l archbuild"
    buildopts=" -- -l archbuild"
    buildcmd="sudo $buildscript $buildopts"
    eval ${buildcmd}
    buildret=$?
    if [[ $buildret -eq 0 ]]; then
        msg "package $pkgbase $pkgver-$pkgrel successfully built"
        checkpkg
        return 0
    else
        errmsg "package failed"
        return 240
    fi
    return 254
}

mkres=0
source PKGBUILD
if [[ "$pkgbase" == "" ]]; then
	pkgbase=$pkgname
fi
msg "run makepkg for ${pkgbase}"
for _arch in ${arch[@]}; do
	msg2 ${_arch}
	buildInChroot ${_arch}
	result=$?
	if [[ $mkres -eq 0 && $result -ne 0 ]]; then
		mkres=$result
	fi
done

if [[ ${mkres} -ne 0 ]]; then
    # make sure there are no pkg files
    rm -f *.pkg.tar.?z
fi

if [[ "${mailto}" != "" ]]; then
	msg "send mail with the outcome of the build"
	date=$(date +%Y-%m-%d\ %H:%M:%S)
	if [[ ${mkres} -eq 0 ]]; then
		# package success
        # zip logfiles and attach zip
        tar -zcf logfiles.tar.gz *.log
		echo "SUCCESS build" | mail -s "archbuild $pkgbase $pkgver-$pkgrel success ${date}" -a logfiles.tar.gz ${mailto}
        # clean logfiles zip
        rm logfiles.tar.gz
	elif [[ ${mkres} -eq 240 ]] || [[ ${mkres} -eq 241 ]]; then
		# package failed
        # zip logfiles and attach zip
        tar -zcf logfiles.tar.gz *.log
		echo "FAILED build" | mail -s "archbuild $pkgbase $pkgver-$pkgrel failed ${date}" -a logfiles.tar.gz ${mailto}
        # clean logfiles zip
        rm logfiles.tar.gz
	else
		# other failure
		echo "OTHER FAIL build" | mail -s "archbuild $pkgbase $pkgver-$pkgrel failed ${date}" ${mailto}
	fi
fi

exit ${mkres}

