#!/bin/bash
source "$(dirname $0)/../share/app-init"

if [ ! -z "$1" ]; then
	if [ -d "$1" ]; then
		cd "$1"
	elif [ -d "$rpdir/$1" ]; then
		cd "$rpdir/$1";
	else
		errmsg "you have to pass an existing directory"
		exit 1
	fi
fi

if [ ! -e PKGBUILD ]; then
	errmsg "this script must be run with a directory containing a PKGBUILD"
	exit 1
fi

if [ ! -z "$2" ]; then
	commitmsg="$2"
else
	commitmsg=""
fi

## init
inrepo=1
thisfolder=`pwd`
if [ -e ../repository ]; then
	source ../repository
	inrepo=0
else
	keepsource=0
fi

if [ $inrepo -eq 0 ]; then
	packagesdir=${pkgrepo}/${repository}/pool/
	[ ! -d ${packagesdir} ] && mkdir -p ${packagesdir}
	case $repository in
		*herecura*)
			buildbase='herecura'
			;;
		*pre-community*)
			buildbase='precommunity'
			;;
		*keep-old-system-alive*)
			buildbase='keepoldalive'
			;;
		*)
			buildbase='extra'
			;;
	esac
else
	buildbase='extra'
fi

## build function
function buildInChroot() {
install_what=""
if [ ${#makedepends[@]} -gt 0 ]; then
	for dp in ${makedepends[@]}; do
		case ${dp} in
			git)
				if [ "${install_what}" != "" ]; then
					install_what="${install_what} "
				fi
				install_what="${install_what}git"
				;;
			subversion)
				if [ "${install_what}" != "" ]; then
					install_what="${install_what} "
				fi
				install_what="${install_what}subversion"
				;;
			mercurial)
				if [ "${install_what}" != "" ]; then
					install_what="${install_what} "
				fi
				install_what="${install_what}mercurial"
				;;
			bzr)
				if [ "${install_what}" != "" ]; then
					install_what="${install_what} "
				fi
				install_what="${install_what}bzr"
				;;
			arch)
				if [ "${install_what}" != "" ]; then
					install_what="${install_what} "
				fi
				install_what="${install_what}arch"
				;;
			darcs)
				if [ "${install_what}" != "" ]; then
					install_what="${install_what} "
				fi
				install_what="${install_what}darcs"
				;;
			cvs)
				if [ "${install_what}" != "" ]; then
					install_what="${install_what} "
				fi
				install_what="${install_what}cvs"
				;;
			monotone)
				if [ "${install_what}" != "" ]; then
					install_what="${install_what} "
				fi
				install_what="${install_what}monotone"
				;;
		esac
	done
fi
if [ "$install_what" != "" ]; then
	install_before=" -y '${install_what}'"
fi
if [ "$1" == "any" ]; then
	_arch=$1
	buildx="sudo $buildbase-x86_64-build"
else
	_arch=$1
	buildx="sudo $buildbase-$_arch-build"
fi
keepversion=$2
buildopts=" -- -l archbuild -c${install_before}"
if [ ${keepsource} -eq 1 ]; then
	buildopts="${buildopts} -- --log"
else
	buildopts="${buildopts} -- -c --log"
fi
if [ ${keepversion} -eq 0 ]; then
	buildopts="${buildopts} --holdver"
fi
fullpkg=${pkgname}-${pkgver}-${pkgrel}-${_arch}.pkg.tar.xz
if [[ ${testing} -eq 0 && -e "${packagesdir}/${fullpkg}" ]]; then
	msg "package $fullpkg already exists"
	return 250
elif [[ ${testing} -eq 1 && ${install_what} = "" && -e "${packagesdir}/${fullpkg}" ]]; then
	msg "package $fullpkg already exists"
	return 250
else
	buildcmd="${buildx}${buildopts}"
	eval ${buildcmd}
	buildret=$?
	if [ $buildret -eq 0 ]; then
		msg "package $fullpkg successfully built"
		return 0
	elif [ $buildret -eq 255 ]; then
		errmsg "creating build environment failed"
		msg "retry with clean build environment"
		buildcmd="${buildx} -c${buildopts}"
		eval ${buildcmd}
		if [ $? -eq 0 ]; then
			msg "package $fullpkg successfully built"
			return 0
		else
			errmsg "package $fullpkg failed"
			return 241
		fi
	else
		errmsg "package $fullpkg failed"
		return 240
	fi
fi
return 254
}

mkres=0
firstone=1
source PKGBUILD
msg "run makepkg for ${pkgname}"
for _arch in ${arch[@]}; do
	msg2 ${_arch}
	buildInChroot ${_arch} $firstone
	result=$?
	firstone=0
	msg2 "cleanup src and pkg"
	rm -rf src/
	rm -rf pkg/
	if [[ $mkres -eq 0 && $result -ne 0 ]]; then
		mkres=$result
	fi
done

# cleanup lockfile so they cant accidentally be commited
rm -f .lock

source PKGBUILD
if [ "$pkgbase" = "" ]; then
	pkgbase=$pkgname
fi
fullpkg=${pkgbase}-${pkgver}-${pkgrel}
if [ $inrepo -eq 0 ]; then
	# test if a built testing package is the same as before
	for _arch in ${arch[@]}; do
		tstpkg=${pkgname}-${pkgver}-${pkgrel}-${_arch}.pkg.tar.xz
		if [[ ${testing} -eq 1 && -e "${packagesdir}/${tstpkg}" ]]; then
			msg "package $tstpkg already exists"
			mkres=250
		fi
	done

	if [ ${mkres} -eq 0 ]; then
		msg "package $fullpkg successfully built"
		gpgsign
		msg "move packages into package pool"
		mv *.pkg.tar.?z *.pkg.tar.?z.sig ${packagesdir}

		for _arch in ${rarch[@]}; do
			archpkgdir=${pkgrepo}/${repository}/${_arch}
			[ ! -d ${archpkgdir} ] && mkdir -p ${archpkgdir}
			pushd ${archpkgdir}
			for _partialpkg in ${pkgname[@]}; do
				if [ "${arch}" == "any" ]; then
					ln -s ../pool/${_partialpkg}-${pkgver}-${pkgrel}-any.pkg.tar.?z
					ln -s ../pool/${_partialpkg}-${pkgver}-${pkgrel}-any.pkg.tar.?z.sig
					toremove=$(ls ${_partialpkg}*.pkg.tar.?z* | grep -v -e "${_partialpkg}-${pkgver}-${pkgrel}-any\.pkg\.tar\..z" 2>/dev/null)
					if [ $? -eq 0 ]; then
						echo $toremove
						rm $toremove
					fi
				else
					ln -s ../pool/${_partialpkg}-${pkgver}-${pkgrel}-${_arch}.pkg.tar.?z
					ln -s ../pool/${_partialpkg}-${pkgver}-${pkgrel}-${_arch}.pkg.tar.?z.sig
					toremove=$(ls ${_partialpkg}*.pkg.tar.?z* | grep -v -e "${_partialpkg}-${pkgver}-${pkgrel}-${_arch}\.pkg\.tar\..z" 2>/dev/null)
					if [ $? -eq 0 ]; then
						echo $toremove
						rm $toremove
					fi
				fi
			done
			popd
		done
		pushd ../
		regenrepo
		popd
	fi

	# on success build commit into git tree
	if [ ${mkres} -eq 0 ]; then
		msg "commit sucessfull package"
		git add .
		finalcommitmsg="$pkgbase :: ${pkgver}-${pkgrel}"
		if [ "$commitmsg" != "" ]; then
			finalcommitmsg="${finalcommitmsg} ;; ${commitmsg}"
		fi
		git commit -sm "${finalcommitmsg}"
	fi

	# if i maintain it in aur upload
	if [ ${mkres} -eq 0 ] && [ -e AUR ]; then
		# i maintain this so upload on success to aur
		aurupload
	fi
fi

if [ "${mailto}" != "" ]; then
	msg "send mail with the outcome of the build"
	date=$(date +%Y-%m-%d\ %H:%M:%S)
	if [ ${mkres} -eq 0 ]; then
		# package success
		echo "SUCCESS build" | mail -s "archbuild $fullpkg success ${date}" ${mailto}
	elif [ ${mkres} -eq 250 ]; then
		# package exists
		echo "no mail for exists"
		# echo "EXISTS build" | mail -s "archbuild ${thisfolder##*/} exists ${date}" ${mailto}
	elif [ ${mkres} -eq 240 ] || [ ${mkres} -eq 241 ]; then
		# package failed
		logfiles=""
		for logfile in $(find . -mindepth 1 -maxdepth 1 -type f -name '*.log'); do
			logfiles="$logfiles -a $logfile"
		done
		echo "FAILED build" | mail -s "archbuild $fullpkg failed ${date}"$logfiles ${mailto}
	else
		# other failure
		echo "OTHER FAIL build" | mail -s "archbuild $fullpkg failed ${date}" ${mailto}
	fi
fi

msg "cleanup possible leftovers"
rm -rf src/
rm -rf pkg/
rm -f .lock
if [ $inrepo -eq 0 ]; then
	rm -f *.pkg.tar.?z*
	rm -f *.log
fi

exit ${mkres}

