#!/bin/bash
source "$(dirname $0)/../share/app-init"

if [[ ! -e PKGBUILD ]]; then
    errmsg "this script must be run with a directory containing a PKGBUILD"
    exit 1
fi

if [[ ! -z "$1" ]]; then
	commitmsg="$1"
else
	commitmsg=""
fi

res=0

repository=$(git symbolic-ref HEAD | sed -e 's/refs\/heads\///' 2> /dev/null)

if [[ "$repository" == "" ]]; then
    errmsg "pkg-* tools must be run inside a git repo"
    exit 1
fi

source PKGBUILD

if [[ "$pkgbase" == "" ]]; then
    pkgbase=$pkgname
fi

for _arch in ${arch[@]}; do
    for _partialpkg in ${pkgname[@]}; do
        tstpkg="${_partialpkg}-${pkgver}-${pkgrel}-${_arch}.pkg.tar.xz"
        if [[ -e "${pkgpool}/${tstpkg}" ]]; then
            errmsg "package $tstpkg already exists"
            res=250
        fi
    done
done

if [[ $res -ne 0 ]]; then
    exit $res
fi

gpgsign

msg "move packages into package pool"
mv *.pkg.tar.xz *.pkg.tar.xz.sig ${pkgpool}
msg "remove logs"
rm *.log

msg "generate .SRCINFO"
mksrcinfo
msg "commit sucessfull package"
git add -A .
finalcommitmsg="$pkgbase :: ${pkgver}-${pkgrel}"
if [[ "$commitmsg" != "" ]]; then
    finalcommitmsg="${finalcommitmsg} ;; ${commitmsg}"
fi
git commit -sm "${finalcommitmsg}"
[[ $(git remote) ]] && git push -u

if [[ "$arch" == "any" ]]; then
    pkgbuildarch=(${rarch[@]})
else
    pkgbuildarch=()
    for _arch in ${arch[@]}; do
        echo $_arch
        if in_array $_arch ${rarch[@]}; then
            pkgbuildarch+=($_arch)
        fi
    done
fi

for _arch in ${pkgbuildarch[@]}; do

    archpkgdir=${pkgrepo}/${repository}/${_arch}
    [ ! -d ${archpkgdir} ] && mkdir -p ${archpkgdir}
    pushd ${archpkgdir}

    for _partialpkg in ${pkgname[@]}; do

        if [[ "$arch" == "any" ]]; then
            pkgarch="any"
        else
            pkgarch="$_arch"
        fi

        msg "${_partialpkg}-${pkgver}-${pkgrel}-${pkgarch}.pkg.tar.xz"
        archpkgfile="$pkgpoolvsrepo/${_partialpkg}-${pkgver}-${pkgrel}-${pkgarch}.pkg.tar.xz"
        if [[ -e $archpkgfile ]]; then
            msg2 "$_arch pkg exists, link to it"
            ln -s $archpkgfile
            ln -s ${archpkgfile}.sig
            toremove=$(ls ${_partialpkg}*.pkg.tar.?z* | perl -ne "print if /${_partialpkg}-[a-zA-Z0-9\._]*?-[a-zA-Z0-9\._]*?-[a-zA-Z0-9\._]*?\.pkg\.tar\..z/" | grep -v -e "${_partialpkg}-${pkgver}-${pkgrel}-${pkgarch}\.pkg\.tar\..z" 2>/dev/null)
            if [ $? -eq 0 ]; then
                echo $toremove
                rm $toremove
            fi
        fi

    done
    popd
done

regenrepo "$repository"
